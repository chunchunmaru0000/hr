#######################################################################################
# 								DOT
#######################################################################################
'.' as token
expr.expr_call makes expr first argument of expr_call

проц.очистить(регистр)

enums:
enum ASDF {
	A, S, D, F
}
var_expr1.var_expr2 makes expr enum value

. is after expression

#######################################################################################
# 								COMPILER
#######################################################################################
args to compiler

#######################################################################################
# 								ENUM
#######################################################################################
UNREPEATABLE flag for an enum

#######################################################################################
# 								ASM
#######################################################################################
let a, b, c, d byte "hello world"
so plist of names in let statement of the assembly

#######################################################################################
# 								ARGS
#######################################################################################
do ',' fun arg types like the ones that are possible in function signature but
function variable signature

*ч32 == *[ч32], so arr type is equal to just the type, array only haves size
#######################################################################################
# 								COMMENTS
#######################################################################################
source code comments in assembly, need to get the last token of an instruction also

#######################################################################################
# 								ATOMAR THINGS
#######################################################################################
атом ( ... )

#######################################################################################
# 								UNDEF
#######################################################################################
when i will have defns as a dictionary then i can do maybe #undef

#######################################################################################
# 								OPTIMIZATIONS
#######################################################################################
Constant folding
Constant propagation like for local variable have bool where if its not changed from
	last constant value then it can take it
not gonna do Dead code elimination cuz useless in 'implicit language'
Register allocation with как рег expression, u need to alloc reristers urlesf

#######################################################################################
# 								AS IN LOOP
#######################################################################################
как register expression in loop defenition
для с как рсх от 0 до 10 ( ... )

#######################################################################################
# 			INLINE MACRO OR ANONIMOUS FUNS
#######################################################################################
пусть ( а: ч32 )
а =
    2
    |> фц ( х: ч32 ) ч32 ( х * х )
    |> фц ( х: ч32 ) ч32 ( х + х )

пусть ( ф: (ч32 ч32) )
ф = фц ( х: ч32 ) ч32 (
    ; вот тут уже между анонимными функциями и основной функции должны
    ; тоже быть области видимости
    пусть ( у: ч32 )
    у = х
    х = 123
    х += у * у
)
